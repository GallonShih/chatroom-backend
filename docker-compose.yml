version: '3.8'

services:
  app:
    container_name: chatroom-backend
    image: chatroom-backend:test  # Use the built image
    build:
      context: .  # If the image doesn't exist, build it using Dockerfile
      dockerfile: Dockerfile
    volumes:
      - ./app:/app  # Mount the current directory to /app inside the container
    command: tail -f /dev/null  # Override the default command to keep the container running
    ports:
      - "8000:8000"  # Map port 8000 of the container to port 8000 on the host
    depends_on:
      - postgres  # Ensure PostgreSQL starts before app
      - kafka1  # Ensure Kafka starts before the app
    env_file:  # Reference the .env file
      - .env
    network_mode: "host"  # Enable host networking for Kafka

  postgres:
    container_name: chatroom-postgres
    image: postgres:16  # Use PostgreSQL 16 image
    environment:
      POSTGRES_USER: postgres  # Change this to your preferred user
      POSTGRES_PASSWORD: postgres  # Change this to your preferred password
    ports:
      - "5432:5432"  # Map port 5432 to access PostgreSQL

  pgadmin:
    container_name: chatroom-pgadmin
    image: dpage/pgadmin4  # Use pgAdmin 4 image
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com  # Default email for pgAdmin login
      PGADMIN_DEFAULT_PASSWORD: admin  # Default password for pgAdmin login
    ports:
      - "5050:80"  # Map port 5050 to access pgAdmin
    depends_on:
      - postgres
  
  # Zookeeper Service
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"  # Map port 2181 of the container to the host
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  # Kafka Service
  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"  # Map port 9092 of the container to the host
      - "29092:29092"  # Map port 29092 for internal Docker use
      - "9999:9999"  # JMX Port
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"  # Connect Kafka to Zookeeper
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1  # Ensure Zookeeper starts before Kafka

  # ccadvisor:
  #   container_name: chatroom-ccadvisor
  #   image: gcr.io/cadvisor/cadvisor:v0.47.1
  #   privileged: true
  #   platform: linux/aarch64
  #   volumes:
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   ports:
  #     - 8080:8080
  #   restart: always
